// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: crowdfund/campaigns.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Campaigns struct {
	Id      uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Goal    string `protobuf:"bytes,2,opt,name=goal,proto3" json:"goal,omitempty"`
	Pledged string `protobuf:"bytes,3,opt,name=pledged,proto3" json:"pledged,omitempty"`
	Start   int64  `protobuf:"varint,4,opt,name=start,proto3" json:"start,omitempty"`
	End     int64  `protobuf:"varint,5,opt,name=end,proto3" json:"end,omitempty"`
	Claimed bool   `protobuf:"varint,6,opt,name=claimed,proto3" json:"claimed,omitempty"`
	Creator string `protobuf:"bytes,7,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *Campaigns) Reset()         { *m = Campaigns{} }
func (m *Campaigns) String() string { return proto.CompactTextString(m) }
func (*Campaigns) ProtoMessage()    {}
func (*Campaigns) Descriptor() ([]byte, []int) {
	return fileDescriptor_f45b6b29b4990f12, []int{0}
}
func (m *Campaigns) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Campaigns) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Campaigns.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Campaigns) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Campaigns.Merge(m, src)
}
func (m *Campaigns) XXX_Size() int {
	return m.Size()
}
func (m *Campaigns) XXX_DiscardUnknown() {
	xxx_messageInfo_Campaigns.DiscardUnknown(m)
}

var xxx_messageInfo_Campaigns proto.InternalMessageInfo

func (m *Campaigns) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Campaigns) GetGoal() string {
	if m != nil {
		return m.Goal
	}
	return ""
}

func (m *Campaigns) GetPledged() string {
	if m != nil {
		return m.Pledged
	}
	return ""
}

func (m *Campaigns) GetStart() int64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *Campaigns) GetEnd() int64 {
	if m != nil {
		return m.End
	}
	return 0
}

func (m *Campaigns) GetClaimed() bool {
	if m != nil {
		return m.Claimed
	}
	return false
}

func (m *Campaigns) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func init() {
	proto.RegisterType((*Campaigns)(nil), "youngestdev.crowdfund.crowdfund.Campaigns")
}

func init() { proto.RegisterFile("crowdfund/campaigns.proto", fileDescriptor_f45b6b29b4990f12) }

var fileDescriptor_f45b6b29b4990f12 = []byte{
	// 245 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x90, 0x31, 0x4e, 0xc3, 0x30,
	0x18, 0x85, 0xf3, 0x27, 0x69, 0x4b, 0x3d, 0x20, 0x64, 0x31, 0x98, 0xc5, 0x44, 0x4c, 0x99, 0x12,
	0x09, 0x6e, 0x00, 0x2b, 0x53, 0x46, 0x36, 0x37, 0xbf, 0x31, 0x96, 0x92, 0x38, 0xb2, 0x1d, 0xa0,
	0xb7, 0xe0, 0x12, 0xdc, 0x85, 0xb1, 0x23, 0x23, 0x4a, 0x2e, 0x82, 0xea, 0x12, 0xda, 0xed, 0xfb,
	0x9e, 0xed, 0x27, 0xf9, 0x91, 0xab, 0xda, 0x9a, 0x37, 0x7c, 0x1e, 0x3a, 0x2c, 0x6b, 0xd1, 0xf6,
	0x42, 0xab, 0xce, 0x15, 0xbd, 0x35, 0xde, 0xd0, 0xeb, 0xad, 0x19, 0x3a, 0x25, 0x9d, 0x47, 0xf9,
	0x5a, 0xfc, 0x5f, 0x3b, 0xd2, 0xcd, 0x27, 0x90, 0xf5, 0xc3, 0xfc, 0x88, 0x9e, 0x93, 0x58, 0x23,
	0x83, 0x0c, 0xf2, 0xb4, 0x8a, 0x35, 0x52, 0x4a, 0x52, 0x65, 0x44, 0xc3, 0xe2, 0x0c, 0xf2, 0x75,
	0x15, 0x98, 0x32, 0xb2, 0xea, 0x1b, 0x89, 0x4a, 0x22, 0x4b, 0x42, 0x3c, 0x2b, 0xbd, 0x24, 0x0b,
	0xe7, 0x85, 0xf5, 0x2c, 0xcd, 0x20, 0x4f, 0xaa, 0x83, 0xd0, 0x0b, 0x92, 0xc8, 0x0e, 0xd9, 0x22,
	0x64, 0x7b, 0xdc, 0x37, 0xd4, 0x8d, 0xd0, 0xad, 0x44, 0xb6, 0xcc, 0x20, 0x3f, 0xab, 0x66, 0x0d,
	0x27, 0x56, 0x0a, 0x6f, 0x2c, 0x5b, 0x1d, 0xba, 0xff, 0xf4, 0xfe, 0xf1, 0x6b, 0xe4, 0xb0, 0x1b,
	0x39, 0xfc, 0x8c, 0x1c, 0x3e, 0x26, 0x1e, 0xed, 0x26, 0x1e, 0x7d, 0x4f, 0x3c, 0x7a, 0xba, 0x55,
	0xda, 0xbf, 0x0c, 0x9b, 0xa2, 0x36, 0x6d, 0x79, 0xf2, 0xdb, 0xf2, 0x38, 0xca, 0xfb, 0x09, 0xfb,
	0x6d, 0x2f, 0xdd, 0x66, 0x19, 0xd6, 0xb9, 0xfb, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x96, 0x30, 0xcf,
	0x39, 0x3a, 0x01, 0x00, 0x00,
}

func (m *Campaigns) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Campaigns) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Campaigns) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintCampaigns(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Claimed {
		i--
		if m.Claimed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.End != 0 {
		i = encodeVarintCampaigns(dAtA, i, uint64(m.End))
		i--
		dAtA[i] = 0x28
	}
	if m.Start != 0 {
		i = encodeVarintCampaigns(dAtA, i, uint64(m.Start))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Pledged) > 0 {
		i -= len(m.Pledged)
		copy(dAtA[i:], m.Pledged)
		i = encodeVarintCampaigns(dAtA, i, uint64(len(m.Pledged)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Goal) > 0 {
		i -= len(m.Goal)
		copy(dAtA[i:], m.Goal)
		i = encodeVarintCampaigns(dAtA, i, uint64(len(m.Goal)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintCampaigns(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintCampaigns(dAtA []byte, offset int, v uint64) int {
	offset -= sovCampaigns(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Campaigns) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovCampaigns(uint64(m.Id))
	}
	l = len(m.Goal)
	if l > 0 {
		n += 1 + l + sovCampaigns(uint64(l))
	}
	l = len(m.Pledged)
	if l > 0 {
		n += 1 + l + sovCampaigns(uint64(l))
	}
	if m.Start != 0 {
		n += 1 + sovCampaigns(uint64(m.Start))
	}
	if m.End != 0 {
		n += 1 + sovCampaigns(uint64(m.End))
	}
	if m.Claimed {
		n += 2
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovCampaigns(uint64(l))
	}
	return n
}

func sovCampaigns(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCampaigns(x uint64) (n int) {
	return sovCampaigns(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Campaigns) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampaigns
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Campaigns: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Campaigns: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaigns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Goal", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaigns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCampaigns
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCampaigns
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Goal = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pledged", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaigns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCampaigns
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCampaigns
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pledged = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			m.Start = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaigns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Start |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field End", wireType)
			}
			m.End = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaigns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.End |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Claimed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaigns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Claimed = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaigns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCampaigns
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCampaigns
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCampaigns(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCampaigns
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCampaigns(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCampaigns
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCampaigns
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCampaigns
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCampaigns
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCampaigns
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCampaigns
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCampaigns        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCampaigns          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCampaigns = fmt.Errorf("proto: unexpected end of group")
)
